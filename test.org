#+TITLE: Org file to test RTF backend 
#+AUTHOR: Stephen Weigand
#+EMAIL: Weigand.Stephen@gmail.com
#+STARTUP: showall
#+OPTIONS: toc:nil

* TODO Markup                                                         :mytag:
  :LOGBOOK:
  CLOCK: [2018-11-09 Fri 22:06]--[2018-11-09 Fri 22:07] =>  0:01
  :END:

From the manual: "You can make words *bold*, /italic/, _underlined_, =verbatim= and
~code~, and, if you must, +strike-through+. Text in the code and
verbatim string is not processed for Org mode specific syntax, it is
exported verbatim." Also we can use x^2 and x_2. 

Hard line breaks \\    
are implemented.

** [#B] Symbols
Greek symbols like \beta are not yet implemented. I do not
even know where they are handled by the backend.



* Whitespace in paragraphs not very robust.

Here is an example of what a paragraph looks like
in RTF. Blank lines are ignored by RTF readers
but spaces are maintained. We want writers to
not have to worry about whitespace too much.

#+BEGIN_EXAMPLE
{\pard
This is my paragraph and I have
 wrapped the lines so there
 is space between words (and
 the space is at the start of
 the line).
\par}
#+END_EXAMPLE


This paragraph   demonstrates some eratic    spacing that is
handled well with the exporter. It preserves single or
double spaces after a sentence ends.  Notice?    It also fixes
too many spaces after a sentence end. This is handled by
~org-rtf--fill-string~ which adapts ~org-ascii--fill-string~
plus I added the RTF-required white space to at the start
of the second and subsequent lines in a paragraph. 

   This paragraph demonstrates some 
   sensible spacing that is also
   handled well.

   This paragraph demonstrates some 
     sensible spacing that is *not*
     handled well. I think it is how 
     ~fill-paragraph~ handles exdenting.

   This paragraph demonstrates some
sensible spacing that is *not*
handled well. See ~fill-paragraph~.

   



* Center block

I do not know how to center. This is from the manual. The
contents are already a formatted paragraph.

#+BEGIN_CENTER
Everything should be made as simple as possible, \\
but not any simpler
#+END_CENTER

* Special symbols
I do not know where the exporters deal with special symbols. 

#+BEGIN_EXAMPLE
pi + 4 > 7
#+END_EXAMPLE

A new paragraph.

#+BEGIN_EXAMPLE -n
pi + 4 > 7
a <- function(b) b + 3
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(org-rtf-export-as-rtf)
#+END_SRC

Now some "pure" RTF.

#+BEGIN_EXPORT rtf
{\ldblequote}Hello world!{\rdblquote}
#+END_EXPORT

#+BEGIN_EXPORT rtf
{\ldblequote}Hello world!{\rdblquote}
{\pard
I am
 a walrus
\par}
#+END_EXPORT

I can also test snippets to get a bullet like this: @@rtf:\bullet@@

The single-line export does not seem to work:

#+RTF: {\pard Can I get an \emdash?\par}

This is some code

: plot(x, y)

* TODO Properly exporting headlines
I haven't understood the likes of ~org-ascii-headline~ due to not
understanding very much Emacs Lisp. Here is an outline of
what ~org-ascii-headline~ is doing (as far as my reading tells me)
1. Via ~unless~ only export the headline if it is not a footnote
   section
2. Via ~let*~ where order matters assign these variables

   - low-level :: is it a "low-level" headline. How that is defined is
                  unclear to me.

   - width :: get current text width

   - title :: via ~org-ascii--build-title~. This gives most of what I
              want.

   - pre-blanks :: figure out blanks around headline

   - links :: whether to convert links to (foot?) notes before the
              next headline or to handle them as in-line notes.

   - body :: Comment says this is "re-build contents".

Then if we are "low-level" we are in a "deep substree" so export
it as bulleted list. Otherwise simple output.
: ;; Else: Standard headline.
: (concat title "\n" pre-blanks body)))))

** TODO Sub in ~org-ascii-headline~ making minimal changes.
